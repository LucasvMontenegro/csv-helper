// Code generated by mockery v2.14.0. DO NOT EDIT.

package csvhelper

import (
	bytes "bytes"

	mock "github.com/stretchr/testify/mock"
)

// MockCsvHelper is an autogenerated mock type for the CsvHelper type
type MockCsvHelper[T interface{}] struct {
	mock.Mock
}

// Error provides a mock function with given fields:
func (_m *MockCsvHelper[T]) Error() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Marshal provides a mock function with given fields: cfg
func (_m *MockCsvHelper[T]) Marshal(cfg MarshalConfig) ([]T, error) {
	ret := _m.Called(cfg)

	var r0 []T
	if rf, ok := ret.Get(0).(func(MarshalConfig) []T); ok {
		r0 = rf(cfg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]T)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(MarshalConfig) error); ok {
		r1 = rf(cfg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadAll provides a mock function with given fields: buffer
func (_m *MockCsvHelper[T]) ReadAll(buffer *bytes.Buffer) CsvHelper[T] {
	ret := _m.Called(buffer)

	var r0 CsvHelper[T]
	if rf, ok := ret.Get(0).(func(*bytes.Buffer) CsvHelper[T]); ok {
		r0 = rf(buffer)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(CsvHelper[T])
		}
	}

	return r0
}

// Records provides a mock function with given fields:
func (_m *MockCsvHelper[T]) Records() ([][]string, error) {
	ret := _m.Called()

	var r0 [][]string
	if rf, ok := ret.Get(0).(func() [][]string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([][]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Validate provides a mock function with given fields:
func (_m *MockCsvHelper[T]) Validate() (bool, error) {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockCsvHelper interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockCsvHelper creates a new instance of MockCsvHelper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockCsvHelper[T interface{}](t mockConstructorTestingTNewMockCsvHelper) *MockCsvHelper[T] {
	mock := &MockCsvHelper[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
